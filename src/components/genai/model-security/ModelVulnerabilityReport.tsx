import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { AlertTriangle, ShieldAlert, ShieldCheck } from "lucide-react";
import { TestResults } from "./types";

interface ModelVulnerabilityReportProps {
  results: TestResults;
}

export const ModelVulnerabilityReport = ({ results }: ModelVulnerabilityReportProps) => {
  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'bg-red-500';
      case 'high':
        return 'bg-orange-500';
      case 'medium':
        return 'bg-yellow-500';
      case 'low':
        return 'bg-blue-500';
      default:
        return 'bg-green-500';
    }
  };

  return (
    <Card className="p-6">
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold">Security Test Results</h3>
          <Badge variant="outline" className={getSeverityColor(results.overallRisk)}>
            {results.overallRisk} Risk
          </Badge>
        </div>

        <div className="space-y-4">
          {results.vulnerabilities.map((vuln, index) => (
            <Card key={index} className="p-4">
              <div className="flex items-start gap-4">
                {vuln.severity === 'Critical' || vuln.severity === 'High' ? (
                  <ShieldAlert className="h-5 w-5 text-red-500 mt-1" />
                ) : (
                  <ShieldCheck className="h-5 w-5 text-green-500 mt-1" />
                )}
                <div className="space-y-2 flex-1">
                  <div className="flex items-center justify-between">
                    <h4 className="font-medium">{vuln.name}</h4>
                    <Badge variant="outline" className={getSeverityColor(vuln.severity)}>
                      {vuln.severity}
                    </Badge>
                  </div>
                  <p className="text-sm text-muted-foreground">{vuln.description}</p>
                  {vuln.recommendation && (
                    <div className="mt-2">
                      <h5 className="text-sm font-medium">Recommendation:</h5>
                      <p className="text-sm text-muted-foreground">{vuln.recommendation}</p>
                    </div>
                  )}
                </div>
              </div>
            </Card>
          ))}
        </div>

        {results.recommendations && (
          <div className="mt-6">
            <h4 className="font-medium mb-2">General Recommendations</h4>
            <ul className="list-disc list-inside space-y-2 text-sm text-muted-foreground">
              {results.recommendations.map((rec, index) => (
                <li key={index}>{rec}</li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </Card>
  );
};